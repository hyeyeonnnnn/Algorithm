import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class Main {
    static int N,M,T;
    static int[][] graph;
    static boolean[][] check;
    static int[][] dp;
    static int[] dx = {1,0,-1,0};
    static int[] dy = {0,1,0,-1};
    static int two;

    static void bfs(int x, int y){
        Queue<int[]> q = new LinkedList<>();
        q.add(new int[]{x,y});

        check[x][y] = true;
        while(!q.isEmpty()){
            int[] now = q.poll();
            int nowX = now[0];
            int nowY = now[1];

            for(int i=0;i<4;i++){
                int nextX = nowX+dx[i];
                int nextY = nowY+dy[i];

                if(nextX>0&&nextX<=N && nextY>0&&nextY<=M){
                    if(graph[nextX][nextY]==0 && !check[nextX][nextY]){
                        check[nextX][nextY] = true;
                        q.add(new int[]{nextX, nextY});
                        dp[nextX][nextY] = dp[nowX][nowY]+1;
                    }
                    if(graph[nextX][nextY]==2 && !check[nextX][nextY]){
                        check[nextX][nextY] = true;
                        two = dp[nowX][nowY]+N-nextX+M-nextY;
                    }
                }

            }
        }
    }



//    static void make(int x, int y){
//        for(int i=x;i<=N;i++){
//            for(int j=y;j<=M;j++){
//                if(graph[i][j]==1)
//                    graph[i][j] = 0;
//            }
//        }
//    }
    public static void main(String[] args) throws NumberFormatException, IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());
        T = Integer.parseInt(st.nextToken());

        graph = new int[N+1][M+1];
        check = new boolean[N+1][M+1];
        dp = new int[N+1][M+1];

        for(int i=1;i<=N;i++){
            st = new StringTokenizer(br.readLine());
            for(int j=1;j<=M;j++){
                graph[i][j] = Integer.parseInt(st.nextToken());
            }
        }

        bfs(1,1);

//        System.out.println(two);
//        System.out.println(dp[N][M]);

        int result = Math.min(dp[N][M], two+1);

        if(dp[N][M]!=0 && result<=T)
            System.out.println(result);
        else
            System.out.println("Fail");

    }
}
